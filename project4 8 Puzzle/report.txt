1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<< 20 >>>

2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<< 4.5 >>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Board Data Type)
       Approach:Follow the instruction

       Issues and resolution:

       1)Thr first issues is I got the err message told me that my blankPosition is wrong, I didn`t
       remember the whole err message. My blankPosition statement is  "if (tiles[i][j] == 0)
       blankPos = i*n + j;" What i did is reread the instruction found that we count blank square
       start at 1,not zero. So I just add 1. I change my statement to  blankPos = i*n + j + 1; and
       it works.
       2)I got the err message form the neighbors() due to the wrong directions order, I posted this
        to piazza and got the feedback is SNEW, after changing the order of four directions, the err
        disappeared.
       3)I got wrong hamming number due to I counted hamming started at 0. So I add a statement "
       hamming--;" outside of the for loop.


   Problem 2 (Solver Data Type)
       Approach: Follow the instruction

       Issues and resolution:

       I got the err message 'Test failed because an exception was thrown while instantiating Solver.
       Exception: java.lang.NullPointerException.Limited stack trace:> Solver.<init>(Solver.java:32)'.
       This message means I meet Null board. Imaging the whole process as a tree. I was thinking
       under what kind of situation will encounter a null pointer. If board is null, program will
       throw an exception message"board is null", but it didn`t. So, there is another situation is
       each node will have previous node except root. In this case, root is the initial board which
       is as an argument pass from main(). So, I create a Board prev, and add a condition if(prev ==
        null || !neighbor.equals(prev)) at line 37. There are two reasons, one is to check if prev
        is initial board or not, the other is for caching, avoid repeated calculations.



4. Did you receive help from anyone? List their names, status (classmate,
   CS210 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   SI               ...          ...

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.


